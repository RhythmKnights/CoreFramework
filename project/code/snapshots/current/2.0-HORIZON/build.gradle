plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.rhythmknights'
version = '2.0-HORIZON'
description = 'Management framework for all CorePlugins maintained by the RhythmKnights team'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://libraries.minecraft.net/' }
    flatDir {
        dirs 'libs' // For local CoreAPI jar
    }
}

dependencies {
    // Bukkit API
    compileOnly 'org.spigotmc:spigot-api:1.21.5-R0.1-SNAPSHOT'
    
    // Adventure API - BUNDLED AND RELOCATED
    implementation 'net.kyori:adventure-api:4.21.0'
    implementation 'net.kyori:adventure-text-minimessage:4.21.0'
    implementation 'net.kyori:adventure-platform-bukkit:4.4.0'
    implementation 'net.kyori:adventure-text-serializer-gson:4.21.0'
    implementation 'net.kyori:adventure-text-serializer-legacy:4.21.0'
    
    // CoreAPI - BUNDLED
    implementation name: 'CoreAPI-2.0-HORIZON', version: ''
    
    // Annotations
    compileOnly 'org.jetbrains:annotations:24.0.0'
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

processResources {
    filesMatching('plugin.yml') {
        expand(
            'version': version,
            'description': project.description
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
    options.compilerArgs += ['-parameters']
}

javadoc {
    // Set the destination directory for the generated Javadoc
    destinationDir = file("${buildDir}/docs/javadoc")
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    title = "CoreFramework ${project.version}"
}


shadowJar {
    archiveClassifier.set('')
    
    // Relocate Adventure API to avoid conflicts
    //relocate 'net.kyori.adventure', 'io.rhythmknights.coreframework.libs.adventure'
    
    manifest {
        attributes(
            'Implementation-Title': 'CoreFramework',
            'Implementation-Version': version,
            'Built-By': System.properties['user.name']
        )
    }
    
    // Exclude unwanted files
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/versions.list'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    
    // Don't minimize - we want all Adventure API classes
    // minimize()
}

build {
    dependsOn shadowJar
}

test {
    useJUnitPlatform()
}